name: Vulnerability Scan (On-Demand)

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Target to scan: 'all' (configs + all images), 'config-only', 'image-api', 'image-ray'"
        required: true
        default: "all"
      image_tag:
        description: "Docker image tag (e.g., v1.0.0)"
        required: true
        default: "latest"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  scan:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write  # For pushing images if needed
      security-events: write  # For SARIF upload

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3  # Updated to latest
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Config/FS Scan: Covers all Dockerfiles + Python folders
      - name: Scan configs and filesystem (Dockerfiles + Python code)
        if: inputs.target != 'image-ray' && inputs.target != 'image-api'  # Skip if only scanning one image
        uses: aquasecurity/trivy-action@master  # Use master for latest; or pin to 0.28.0
        env:
          TRIVY_SECURITY_CHECKS: config  # Enables Dockerfile/IaC misconfig scan
        with:
          scan-type: fs
          scan-ref: .  # Scans root (all Dockerfiles) + subfolders like common_llm/dataset_profiler
          vuln-type: os,library
          severity: CRITICAL,HIGH,MEDIUM
          format: sarif
          output: trivy-fs-results.sarif

      - name: Upload FS/config scan results to GitHub Security
        if: inputs.target != 'image-ray' && inputs.target != 'image-api'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs-results.sarif

      # Build & Scan API Image
      - name: Build and scan API image
        if: contains(inputs.target, 'image-api') || inputs.target == 'all'
        run: |
          docker build -f Dockerfile.api -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:api-${{ inputs.image_tag }} .
        # Inline build/push for simplicity; scan next

      - name: Scan API image
        if: contains(inputs.target, 'image-api') || inputs.target == 'all'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:api-${{ inputs.image_tag }}
          vuln-type: os,library
          severity: CRITICAL,HIGH
          format: sarif
          output: trivy-api-results.sarif
        continue-on-error: false  # Fail workflow on CRITICAL/HIGH

      - name: Upload API image scan results
        if: contains(inputs.target, 'image-api') || inputs.target == 'all'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-api-results.sarif

      # Build & Scan Ray Image
      - name: Build and scan Ray image
        if: contains(inputs.target, 'image-ray') || inputs.target == 'all'
        run: |
          docker build -f Dockerfile.ray -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ray-${{ inputs.image_tag }} .

      - name: Scan Ray image
        if: contains(inputs.target, 'image-ray') || inputs.target == 'all'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ray-${{ inputs.image_tag }}
          vuln-type: os,library
          severity: CRITICAL,HIGH
          format: sarif
          output: trivy-ray-results.sarif
        continue-on-error: false

      - name: Upload Ray image scan results
        if: contains(inputs.target, 'image-ray') || inputs.target == 'all'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-ray-results.sarif
